{"version":3,"sources":["components/Digest.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Digest","TODAY","format","Date","date","useParams","useState","parsedDoc","setParsedDoc","query","gql","useQuery","variables","notifyOnNetworkStatusChange","loading","data","error","refetch","useEffect","console","log","mass_media_digest_kg","length","digest_text","srcDoc","style","width","height","position","top","left","border","App","className","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"wQAmEeA,EA7DA,WACX,IAAMC,EAAQC,YAAO,IAAIC,KAAQ,cAC1BC,EAA0BC,cAA1BD,KACP,EAAkCE,mBAAc,MAAhD,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAQC,YAAI,oRAWlB,EAKIC,YAASF,EAAO,CAChBG,UAAW,CACPR,KAAI,OAAEA,QAAF,IAAEA,IAAQH,GAElBY,6BAA6B,IAR7BC,EADJ,EACIA,QAEAC,GAHJ,EAEIC,MAFJ,EAGID,MAHJ,EAIIE,QAqBJ,OAbAC,qBAAU,WAEN,GADAC,QAAQC,IAAIL,GACRA,GAAQA,EAAKM,qBAAqBC,OAAS,EAAG,CAC9C,IAAOC,EAAeR,EAAKM,qBAAqB,GAAzCE,YAEPf,EAAae,OAEZ,CAEDf,EAAa,iBAAD,OADL,OAAGJ,QAAH,IAAGA,IAAQH,OAGvB,CAACc,IAGA,8BACKD,EACG,wCAEA,8BACI,wBAAQU,OAAQjB,EAAWkB,MAAO,CAC9BC,MAAO,OACPC,OAAQ,OACRC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,eCtCjBC,EAfH,kBACR,qBAAKC,UAAU,MAAf,SACI,cAAC,IAAD,CAAQC,SAAU,gBAAlB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAAlB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACI,cAAC,EAAD,cCALC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wBCFRQ,EAAS,IAAIC,IAAa,CAC5BC,IAAK,kDACLC,MAAO,IAAIC,MAGfC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACI,cAAC,EAAD,QAGRS,SAASC,eAAe,SAM5BnB,M","file":"static/js/main.c246ae1f.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {gql, useQuery} from '@apollo/client';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {format} from \"date-fns\"; // theme css file\r\n\r\n\r\nconst Digest = () => {\r\n    const TODAY = format(new Date(), 'yyyy-MM-dd')\r\n    const {date}: { date: string } = useParams()\r\n    const [parsedDoc, setParsedDoc] = useState<any>(null)\r\n\r\n    const query = gql(`\r\n        query MyQuery($date: date) {\r\n          mass_media_digest_kg(where: {digest_type: {_eq: \"combined\"}, digest_date: {_eq: $date}}) {\r\n            digest_date\r\n            digest_period\r\n            digest_text\r\n            digest_type\r\n          }\r\n        }\r\n    `)\r\n\r\n    const {\r\n        loading,\r\n        error,\r\n        data,\r\n        refetch\r\n    } = useQuery(query, {\r\n        variables: {\r\n            date: date ?? TODAY\r\n        },\r\n        notifyOnNetworkStatusChange: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log(data)\r\n        if (data && data.mass_media_digest_kg.length > 0) {\r\n            const {digest_text} = data.mass_media_digest_kg[0];\r\n\r\n            setParsedDoc(digest_text)\r\n        }\r\n        else {\r\n            const d = date ?? TODAY\r\n            setParsedDoc(`No Digest for ${d}`)\r\n        }\r\n    }, [data])\r\n\r\n    return (\r\n        <div>\r\n            {loading ?\r\n                <p>loading</p>\r\n                :\r\n                <div>\r\n                    <iframe srcDoc={parsedDoc} style={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        position: \"absolute\",\r\n                        top: 0,\r\n                        left: 0,\r\n                        border: \"none\"\r\n                    }}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Digest","import React from 'react';\r\nimport './App.css';\r\n\r\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport Digest from \"./components/Digest\";\r\n\r\nconst App = () => (\r\n    <div className=\"App\">\r\n        <Router basename={\"/KloopDigests\"}>\r\n            <Switch>\r\n                <Route exact path=\"/:date\">\r\n                    <Digest/>\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <Digest/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    </div>\r\n);\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {ApolloClient, ApolloProvider, gql, InMemoryCache} from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n    uri: \"https://splendid-adder-68.hasura.app/v1/graphql\",\r\n    cache: new InMemoryCache()\r\n});\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ApolloProvider client={client}>\r\n            <App/>\r\n        </ApolloProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}