{"version":3,"sources":["components/Digest.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Digest","TODAY","format","Date","console","log","startOfYesterday","YESTERDAY","date","useParams","history","useHistory","useState","parsedDoc","setParsedDoc","React","selectedDate","setSelectedDate","query","gql","queryDate","toLowerCase","isValid","parse","useEffect","useQuery","variables","notifyOnNetworkStatusChange","loading","data","mass_media_digest_kg","length","digest_text","parseDate","d","utils","DateFnsUtils","locale","ruLocale","style","padding","margin","id","label","value","onChange","pickedDate","parsedDate","push","clearable","cancelLabel","okLabel","clearLabel","KeyboardButtonProps","dangerouslySetInnerHTML","__html","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"0UA4IeA,EA/HA,WACX,IAAMC,EAAQC,YAAO,IAAIC,KAAQ,cACjCC,QAAQC,IAAIH,YAAOI,cAAoB,eACvC,IAAMC,EAAYL,YAAOI,cAAoB,cACtCE,EAA0BC,cAA1BD,KACDE,EAAUC,cAChB,EAAkCC,mBAAc,MAAhD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCC,IAAMH,SAAe,IAAIT,MAAjE,mBAAOa,EAAP,KAAqBC,EAArB,KAEIC,EAAQC,YAAI,oRAWZX,IACAU,EAAQC,YAAI,qRAYhB,IAAIC,EAAYnB,EACZO,IAAgC,cAAvBA,EAAKa,eAAiCC,YAAQC,YAAMf,EAAM,aAAc,IAAIL,UAEjFiB,EADuB,cAAvBZ,EAAKa,cACOd,EAEAC,GAIpBgB,qBAAU,WACFhB,IAAgC,cAAvBA,EAAKa,eAAiCC,YAAQC,YAAMf,EAAM,aAAc,IAAIL,UAEjFiB,EADuB,cAAvBZ,EAAKa,cACOd,EAEAC,GAGpBS,EAAgB,IAAId,KAAKiB,MAC1B,CAACA,IAEJ,MAGIK,YAASP,EAAO,CAChBQ,UAAW,CACPlB,KAAMY,GAEVO,6BAA6B,IAN7BC,EADJ,EACIA,QACAC,EAFJ,EAEIA,KAQJL,qBAAU,WACN,GAAIK,GAAQA,EAAKC,qBAAqBC,OAAS,EAAG,CAC9C,IAAOC,EAAeH,EAAKC,qBAAqB,GAAzCE,YACPlB,EAAakB,QAEblB,EAAa,iBAAD,OAAkBmB,EAAUjB,OAE7C,CAACa,IAEJ,IAAMI,EAAY,SAACC,GACf,OAAOhC,YAAOgC,EAAG,eAgBrB,OACI,cAAC,IAAD,CAAyBC,MAAOC,IAAcC,OAAQC,IAAtD,SACI,sBAAKC,MAAO,CAACC,QAAS,IAAtB,UACI,cAAC,IAAD,CACIC,OAAO,SACPC,GAAG,qBACHC,MAAM,2BACNzC,OAAO,aACP0C,MAAO5B,EACP6B,SAtBS,SAACC,GACtB,GAAIA,GACA,GAAIxB,YAAQwB,GAAa,CACrB,IAAMC,EAAad,EAAUa,GAC7B7B,EAAgB6B,GAChBpC,EAAQsC,KAAR,UAAgBD,UAGpB9B,EAAgB,IAAId,MACpBO,EAAQsC,KAAK,KAcLC,WAAS,EACTC,YAAa,uCACbC,QAAS,eACTC,WAAY,mDACZC,oBAAqB,CACjB,aAAc,iBAGrBzB,EACG,wCAEA,qBAAK0B,wBAAyB,CAACC,OAAQ1C,WCtG5C2C,EAfH,kBACR,8BACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAAlB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACI,cAAC,EAAD,cCALC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,2BCFRQ,EAAS,IAAIC,IAAa,CAC5BC,IAAK,kDACLC,MAAO,IAAIC,MAGfC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACI,cAAC,EAAD,QAGRS,SAASC,eAAe,SAM5BnB,M","file":"static/js/main.8b375a1f.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {gql, useQuery} from '@apollo/client';\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport {format, parse, isValid, startOfYesterday} from \"date-fns\"; // theme css file\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardTimePicker,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\n\r\n\r\nconst Digest = () => {\r\n    const TODAY = format(new Date(), 'yyyy-MM-dd')\r\n    console.log(format(startOfYesterday(), 'yyyy-MM-dd'))\r\n    const YESTERDAY = format(startOfYesterday(), 'yyyy-MM-dd')\r\n    const {date}: { date: string } = useParams()\r\n    const history = useHistory()\r\n    const [parsedDoc, setParsedDoc] = useState<any>(null)\r\n    const [selectedDate, setSelectedDate] = React.useState<Date>(new Date());\r\n\r\n    let query = gql(`\r\n        query MyQuery($date: date) {\r\n          mass_media_digest_kg(where: {digest_period: {_eq: \"latest\"}, digest_date: {_eq: $date}}) {\r\n            digest_date\r\n            digest_period\r\n            digest_text\r\n            digest_type\r\n          }\r\n        }\r\n    `)\r\n\r\n    if (date) {\r\n        query = gql(`\r\n        query MyQuery($date: date) {\r\n          mass_media_digest_kg(where: {digest_type: {_eq: \"combined\"}, digest_date: {_eq: $date}}) {\r\n            digest_date\r\n            digest_period\r\n            digest_text\r\n            digest_type\r\n          }\r\n        }\r\n    `)\r\n    }\r\n\r\n    let queryDate = TODAY\r\n    if (date && (date.toLowerCase() === 'yesterday' || isValid(parse(date, 'yyyy-MM-dd', new Date())))) {\r\n        if (date.toLowerCase() === 'yesterday') {\r\n            queryDate = YESTERDAY\r\n        } else {\r\n            queryDate = date\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (date && (date.toLowerCase() === 'yesterday' || isValid(parse(date, 'yyyy-MM-dd', new Date())))) {\r\n            if (date.toLowerCase() === 'yesterday') {\r\n                queryDate = YESTERDAY\r\n            } else {\r\n                queryDate = date\r\n            }\r\n        }\r\n        setSelectedDate(new Date(queryDate))\r\n    }, [queryDate])\r\n\r\n    const {\r\n        loading,\r\n        data\r\n    } = useQuery(query, {\r\n        variables: {\r\n            date: queryDate\r\n        },\r\n        notifyOnNetworkStatusChange: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (data && data.mass_media_digest_kg.length > 0) {\r\n            const {digest_text} = data.mass_media_digest_kg[0];\r\n            setParsedDoc(digest_text)\r\n        } else {\r\n            setParsedDoc(`No Digest for ${parseDate(selectedDate)}`)\r\n        }\r\n    }, [data])\r\n\r\n    const parseDate = (d: Date) => {\r\n        return format(d, 'yyyy-MM-dd')\r\n    }\r\n\r\n    const handleDateChange = (pickedDate: Date | null) => {\r\n        if (pickedDate) {\r\n            if (isValid(pickedDate)) {\r\n                const parsedDate = parseDate(pickedDate)\r\n                setSelectedDate(pickedDate);\r\n                history.push(`${parsedDate}`)\r\n            }\r\n        } else {\r\n            setSelectedDate(new Date())\r\n            history.push('')\r\n        }\r\n    };\r\n\r\n    return (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ruLocale}>\r\n            <div style={{padding: 20}}>\r\n                <KeyboardDatePicker\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-dialog\"\r\n                    label=\"Дата\"\r\n                    format=\"yyyy-MM-dd\"\r\n                    value={selectedDate}\r\n                    onChange={handleDateChange}\r\n                    clearable\r\n                    cancelLabel={\"Отмена\"}\r\n                    okLabel={\"ОК\"}\r\n                    clearLabel={\"Очистить\"}\r\n                    KeyboardButtonProps={{\r\n                        'aria-label': 'change date',\r\n                    }}\r\n                />\r\n                {loading ?\r\n                    <p>loading</p>\r\n                    :\r\n                    <div dangerouslySetInnerHTML={{__html: parsedDoc}}>\r\n                        {/*<div>*/}\r\n                        {/*<iframe srcDoc={parsedDoc} sandbox={\"allow-same-origin\"} style={{*/}\r\n                        {/*    width: \"100%\",*/}\r\n                        {/*    height: \"100%\",*/}\r\n                        {/*    position: \"absolute\",*/}\r\n                        {/*    top: 0,*/}\r\n                        {/*    left: 0,*/}\r\n                        {/*    border: \"none\"*/}\r\n                        {/*}}/>*/}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </MuiPickersUtilsProvider>\r\n    )\r\n}\r\n\r\nexport default Digest","import React from 'react';\r\nimport './App.css';\r\n\r\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport Digest from \"./components/Digest\";\r\n\r\nconst App = () => (\r\n    <div>\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/:date\">\r\n                    <Digest/>\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <Digest/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    </div>\r\n);\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {ApolloClient, ApolloProvider, gql, InMemoryCache} from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n    uri: \"https://splendid-adder-68.hasura.app/v1/graphql\",\r\n    cache: new InMemoryCache()\r\n});\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ApolloProvider client={client}>\r\n            <App/>\r\n        </ApolloProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}